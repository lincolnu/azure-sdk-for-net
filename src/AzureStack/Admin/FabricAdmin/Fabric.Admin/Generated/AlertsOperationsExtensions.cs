// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.AzureStack.Management.Fabric.Admin
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AlertsOperations.
    /// </summary>
    public static partial class AlertsOperationsExtensions
    {
            /// <summary>
            /// Remediate an alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='alertId'>
            /// Id of the alert.
            /// </param>
            public static void Fix(this IAlertsOperations operations, string location, string alertId)
            {
                operations.FixAsync(location, alertId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remediate an alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='alertId'>
            /// Id of the alert.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FixAsync(this IAlertsOperations operations, string location, string alertId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.FixWithHttpMessagesAsync(location, alertId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remediate an alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='alertId'>
            /// Id of the alert.
            /// </param>
            public static void BeginFix(this IAlertsOperations operations, string location, string alertId)
            {
                operations.BeginFixAsync(location, alertId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remediate an alert.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Location of the resource.
            /// </param>
            /// <param name='alertId'>
            /// Id of the alert.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginFixAsync(this IAlertsOperations operations, string location, string alertId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginFixWithHttpMessagesAsync(location, alertId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
